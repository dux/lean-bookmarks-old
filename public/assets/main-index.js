/*
 Original files in use
 - app/assets/main/js/api.coffee
 - app/assets/main/js/document_on.coffee
 - app/assets/main/js/pjax.coffee
 - app/assets/components/toastr/toastr.coffee
 - app/assets/main/index.root.coffee
*/


/* File: app/assets/main/js/api.js */
// Generated by CoffeeScript 1.7.1
(function() {
  this.Api = {
    silent: function(method, opts, func) {
      if (typeof opts === 'function') {
        func = opts;
        opts = {};
      }
      if (!/^\/api/.test(method)) {
        method = "/api/" + method;
      }
      return $.post(method, opts, function(ret) {
        if (func && !ret['error']) {
          return func(ret);
        }
      });
    },
    send: function(method, opts, func) {
      if (typeof opts === 'function') {
        func = opts;
        opts = {};
      }
      if (!/^\/api/.test(method)) {
        method = "/api/" + method;
      }
      return $.post(method, opts, function(ret) {
        Info.auto(ret);
        if (func && !ret['error']) {
          return func(ret);
        }
      });
    },
    rails_form: function(node, on_success) {
      var form, key, val, _ref;
      node = $(node);
      node.find('button').each(function() {
        return $(this).disable('Saveing...', 2000);
      });
      form = node.closest('form');
      _ref = form.serializeHash();
      for (key in _ref) {
        val = _ref[key];
        if (is_.o(val)) {
          Api.send(form.attr('action'), val, on_success);
        }
      }
      return false;
    }
  };

}).call(this);



/* File: app/assets/main/js/document_on.js */
// Generated by CoffeeScript 1.7.1
(function() {
  var global_submit_form;

  global_submit_form = function(form) {
    var aa, action;
    if ((form.attr('method') || 'get').toUpperCase() === 'GET') {
      action = form.attr('action') || location.href;
      Pjax.load("" + action + "?" + (form.serialize()));
      return false;
    }
    if (aa = form.attr('api-action')) {
      if (window.last_api_action === aa) {
        return false;
      }
      window.last_api_action = aa;
      setTimeout((function() {
        window.last_api_action = null;
      }), 400);
      $.post("/api/" + aa, form.serialize(), function(response) {
        var done;
        Info.auto(response);
        if (window.disabled_button) {
          window.disabled_button.disabled = false;
        }
        if (response.error) {
          return false;
        }
        if (done = form.attr('done')) {
          if (done === 'refresh') {
            Pjax.load(location.href.replace(/https?:\/\/[^\/]+/, ''));
            if (window.Popup) {
              Popup.close();
            }
          } else if (done === 'redirect') {
            Pjax.load(response.path);
            if (window.Popup) {
              Popup.close();
            }
          } else if (/^\//.test(done)) {
            Pjax.load(done);
            if (window.Popup) {
              Popup.close();
            }
          } else {
            eval(done);
          }
          return false;
        }
        return false;
      });
    }
    return false;
  };

  $(document).on('click', function(event) {
    var button, conf, el, form, href, href_el, javascript, test_click;
    el = $(event.target);
    conf = el.closest('*[confirm]');
    if (conf[0]) {
      if (!confirm(conf.attr('confirm'))) {
        return false;
      }
    }
    test_click = el.closest('*[onclick], *[click]');
    if (test_click[0]) {
      if (test_click.attr('click')) {
        return eval(test_click.attr('click'));
      }
      return;
    }
    button = el.closest('button');
    if (button[0]) {
      form = el.closest('form');
      if (form[0]) {
        if (el.closest('.note-editor')[0]) {
          return;
        }
        if (form.attr('onsubmit')) {
          return;
        }
        global_submit_form(form);
        window.disabled_button = button[0];
        button[0].disabled = true;
        setTimeout(function() {
          return window.disabled_button.disabled = false;
        }, 2000);
      }
    }
    href_el = el.closest('*[href]');
    if (href_el[0]) {
      href = href_el.attr('href');
      if (href_el[0].nodeName === 'A' && href_el.attr('target')) {
        return;
      }
      if (event.which === 2) {
        return true;
      }
      if (el.hasClass('new')) {
        window.open(href);
        return false;
      }
      javascript = href.split('javascript:');
      if (javascript[1]) {
        eval(javascript[1].replace(/([^\w])this([^\w])/g, '\\$1href_el\\$2'));
        return false;
      }
      if (/https?:\/\//.test(href) || href_el.attr('target')) {
        window.open(href, href_el.attr('target'));
        return false;
      }
      if (href_el.hasClass('no-pjax') || href_el.hasClass('direct')) {
        return location.href = href;
      } else {
        if (href_el.closest('widget')[0] && href_el.closest('#big-modal-data')[0]) {
          IncludeWidget.load(href_el, href);
          return false;
        } else {
          return Pjax.load(href);
        }
      }
    }
  });

  $(document).on('submit', 'form', function() {
    return global_submit_form($(this));
  });

}).call(this);



/* File: app/assets/main/js/pjax.js */
// Generated by CoffeeScript 1.7.1
(function() {
  this.Pjax = {
    skip_on: [],
    push_state: false,
    refresh: function(func) {
      return Pjax.load(location.pathname + location.search, {
        func: func
      });
    },
    init: function(full_page) {
      this.full_page = full_page != null ? full_page : false;
      if (!this.full_page) {
        return alert("#full_page ID referece not defined in PJAX!\n\nWrap whole page in one DIV element");
      }
      if (window.history && window.history.pushState) {
        Pjax.push_state = true;
        window.history.pushState({
          href: location.href,
          type: 'init'
        }, document.title, location.href);
        return window.onpopstate = function(event) {
          console.log(event.state);
          if (event.state && event.state.href) {
            return Pjax.load(event.state.href, {
              history: true
            });
          } else {
            return history.go(-2);
          }
        };
      }
    },
    skip: function() {
      var el, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        el = arguments[_i];
        _results.push(Pjax.skip_on.push(el));
      }
      return _results;
    },
    redirect: function(href) {
      location.href = href;
      return false;
    },
    replace: function(title, body) {
      document.title = title;
      $(this.full_page).html(body);
      return $(document).trigger('page:change');
    },
    load: function(href, opts) {
      var el, speed, _i, _len, _ref;
      if (opts == null) {
        opts = {};
      }
      if (!href) {
        return false;
      }
      if (typeof href === 'object') {
        href = $(href).attr('href');
      }
      if (href === '#') {
        return;
      }
      if (/^http/.test(href)) {
        return this.redirect(href);
      }
      if (/#/.test(href)) {
        return this.redirect(href);
      }
      if (!Pjax.push_state) {
        return this.redirect(href);
      }
      _ref = Pjax.skip_on;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        switch (typeof el) {
          case 'object':
            if (el.test(href)) {
              return this.redirect(href);
            }
            break;
          case 'function':
            if (el(href)) {
              return this.redirect(href);
            }
            break;
          default:
            if (el === href) {
              return this.redirect(href);
            }
        }
      }
      speed = $.now();
      $.get(href).done((function(_this) {
        return function(data) {
          var body, obj;
          console.log("Pjax.load " + (opts.history ? '(back trigger)' : '') + " " + ($.now() - speed) + "ms: " + href);
          obj = $("<div>" + data + "</div>");
          body = obj.find(_this.full_page).html() || data;
          Pjax.replace(obj.find('title').first().html(), body);
          if (!opts['history']) {
            if (location.href.indexOf(href) > -1) {
              window.history.replaceState({
                href: href,
                type: 'replaced'
              }, document.title, href);
            } else {
              window.history.pushState({
                href: href,
                type: 'pushed'
              }, document.title, href);
            }
          }
          if (window._gaq) {
            _gaq.push(['_trackPageview']);
          }
          if (opts.func) {
            return opts.func();
          }
        };
      })(this)).error(function(ret) {
        return Info.error(ret.statusText);
      });
      return false;
    },
    on_get: function(func) {
      if (func) {
        return $(document).on('page:change', function() {
          return func();
        });
      } else {
        return $(document).trigger('page:change');
      }
    }
  };

}).call(this);



/* File: app/assets/components/toastr/toastr.js */
// Generated by CoffeeScript 1.7.1
(function() {
  this.Info = {
    ok: function(msg) {
      return Info.show('success', msg);
    },
    info: function(msg) {
      return Info.show('info', msg);
    },
    noteice: function(msg) {
      return Info.show('info', msg);
    },
    success: function(msg) {
      return Info.show('success', msg);
    },
    error: function(msg) {
      return Info.show('error', msg);
    },
    alert: function(msg) {
      return Info.show('error', msg);
    },
    warning: function(msg) {
      return Info.show('warning', msg);
    },
    auto: function(res, follow_redirects) {
      if (typeof res === 'string') {
        res = jQuery.parseJSON(res);
      }
      if (res['info']) {
        Info.show('info', res['info']);
      }
      if (res['message']) {
        Info.show('info', res['message']);
      }
      if (res['error']) {
        Info.show('error', res['error']);
      }
      if (res['redirect_to'] && follow_redirects) {
        location.href = res['redirect_to'];
      }
      return true;
    },
    show: function(type, msg) {
      var cont, el;
      if (type === 'notice') {
        type = 'info';
      }
      if (type === 'alert') {
        type = 'error';
      }
      el = $('<div class="toast toast-' + type + '" class="toast-top-right"><div class="toast-message">' + msg + '</div></div>');
      cont = $('#toast-container');
      if (!cont[0]) {
        $('body').append('<div id="toast-container" class="toast-bottom-right"></div>');
        cont = $('#toast-container');
      }
      cont.append(el);
      el.css("top", 0);
      return setTimeout((function(_this) {
        return function() {
          return el.remove();
        };
      })(this), 4500);
    }
  };

  window.alert = Info.error;

}).call(this);


// Generated by CoffeeScript 1.7.1
(function() {
  $(function() {
    Pjax.init('#full-page');
    Pjax.on_get(function() {
      return $('a[href]').click(function() {
        return Pjax.load(this);
      });
    });
    return Pjax.on_get();
  });

}).call(this);
