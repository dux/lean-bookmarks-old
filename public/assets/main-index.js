/*
 Original files in use
 - app/assets/main/js/pjax.coffee
 - app/assets/main/index.root.coffee
*/


/* File: app/assets/main/js/pjax.js */
// Generated by CoffeeScript 1.7.1
(function() {
  this.Pjax = {
    skip_on: [],
    push_state: false,
    refresh: function(func) {
      return Pjax.load(location.pathname + location.search, {
        func: func
      });
    },
    init: function(full_page) {
      this.full_page = full_page != null ? full_page : false;
      if (!this.full_page) {
        return alert("#full_page ID referece not defined in PJAX!\n\nWrap whole page in one DIV element");
      }
      if (window.history && window.history.pushState) {
        Pjax.push_state = true;
        window.history.pushState({
          href: location.href,
          type: 'init'
        }, document.title, location.href);
        return window.onpopstate = function(event) {
          console.log(event.state);
          if (event.state && event.state.href) {
            return Pjax.load(event.state.href, {
              history: true
            });
          } else {
            return history.go(-2);
          }
        };
      }
    },
    skip: function() {
      var el, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        el = arguments[_i];
        _results.push(Pjax.skip_on.push(el));
      }
      return _results;
    },
    redirect: function(href) {
      location.href = href;
      return false;
    },
    replace: function(title, body) {
      document.title = title;
      $(this.full_page).html(body);
      return $(document).trigger('page:change');
    },
    load: function(href, opts) {
      var el, speed, _i, _len, _ref;
      if (opts == null) {
        opts = {};
      }
      if (!href) {
        return false;
      }
      if (typeof href === 'object') {
        href = $(href).attr('href');
      }
      if (href === '#') {
        return;
      }
      if (/^http/.test(href)) {
        return this.redirect(href);
      }
      if (/#/.test(href)) {
        return this.redirect(href);
      }
      if (!Pjax.push_state) {
        return this.redirect(href);
      }
      _ref = Pjax.skip_on;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        switch (typeof el) {
          case 'object':
            if (el.test(href)) {
              return this.redirect(href);
            }
            break;
          case 'function':
            if (el(href)) {
              return this.redirect(href);
            }
            break;
          default:
            if (el === href) {
              return this.redirect(href);
            }
        }
      }
      speed = $.now();
      $.get(href).done((function(_this) {
        return function(data) {
          var body, obj;
          console.log("Pjax.load " + (opts.history ? '(back trigger)' : '') + " " + ($.now() - speed) + "ms: " + href);
          obj = $("<div>" + data + "</div>");
          body = obj.find(_this.full_page).html() || data;
          Pjax.replace(obj.find('title').first().html(), body);
          if (!opts['history']) {
            if (location.href.indexOf(href) > -1) {
              window.history.replaceState({
                href: href,
                type: 'replaced'
              }, document.title, href);
            } else {
              window.history.pushState({
                href: href,
                type: 'pushed'
              }, document.title, href);
            }
          }
          if (window._gaq) {
            _gaq.push(['_trackPageview']);
          }
          if (opts.func) {
            return opts.func();
          }
        };
      })(this)).error(function(ret) {
        return Info.error(ret.statusText);
      });
      return false;
    },
    on_get: function(func) {
      if (func) {
        return $(document).on('page:change', function() {
          return func();
        });
      } else {
        return $(document).trigger('page:change');
      }
    }
  };

}).call(this);


// Generated by CoffeeScript 1.7.1
(function() {
  $(function() {
    Pjax.init('#full-page');
    Pjax.on_get(function() {
      return $('a[href]').click(function() {
        return Pjax.load(this);
      });
    });
    return Pjax.on_get();
  });

}).call(this);
