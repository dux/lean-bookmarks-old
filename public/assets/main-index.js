/*
 Original files in use
 - app/assets/main/js/api.coffee
 - app/assets/main/js/jquery.serialize-hash.js
 - app/assets/main/js/pjax.coffee
 - app/assets/components/toastr/toastr.coffee
 - app/assets/main/index.root.coffee
*/


/* File: app/assets/main/js/api.js */
// Generated by CoffeeScript 1.7.1
(function() {
  this.Api = {
    silent: function(method, opts, func) {
      if (typeof opts === 'function') {
        func = opts;
        opts = {};
      }
      if (!/^\/api/.test(method)) {
        method = "/api/" + method;
      }
      return $.post(method, opts, function(ret) {
        if (func && !ret['error']) {
          return func(ret);
        }
      });
    },
    send: function(method, opts, func) {
      if (typeof opts === 'function') {
        func = opts;
        opts = {};
      }
      if (!/^\/api/.test(method)) {
        method = "/api/" + method;
      }
      return $.post(method, opts, function(ret) {
        Info.auto(ret);
        if (func && !ret['error']) {
          return func(ret);
        }
      });
    },
    rails_form: function(node, on_success) {
      var form, key, val, _ref;
      node = $(node);
      node.find('button').each(function() {
        return $(this).disable('Saveing...', 2000);
      });
      form = node.closest('form');
      _ref = form.serializeHash();
      for (key in _ref) {
        val = _ref[key];
        if (is_.o(val)) {
          Api.send(form.attr('action'), val, on_success);
        }
      }
      return false;
    }
  };

}).call(this);



/* File: assets */
(function($){
  $.fn.serializeHash = function() {
    var hash = {};
    /***
     JQuery plugin that returns a hash from serialization of any form or dom element. It supports Brackets on input names.
     It is convenient if you want to get values from a form and merge it with an other hash for example.

     ** Added by rilinor on 29/05/2012 : jquery serialize hash now support serialization of any dom elements (before, only form were supported). Thanks !

     Example:
     ---------- HTML ----------
     <form id="form">
       <input type="hidden" name="firstkey" value="val1" />
       <input type="hidden" name="secondkey[0]" value="val2" />
       <input type="hidden" name="secondkey[1]" value="val3" />
       <input type="hidden" name="secondkey[key]" value="val4" />
     </form>
     ---------- JS ----------
     $('#form').serializeHash()
     should return :
     {
       firstkey: 'val1',
       secondkey: {
         0: 'val2',
         1: 'val3',
         key: 'val4'
       }
     }
     ***/
    function stringKey(key, value) {
      var beginBracket = key.lastIndexOf('[');
      if (beginBracket == -1) {
        var hash = {};
        hash[key] = value;
        return hash;
      }
      var newKey = key.substr(0, beginBracket);
      var newValue = {};
      newValue[key.substring(beginBracket + 1, key.length - 1)] = value;
      return stringKey(newKey, newValue);
    }

    var els = $(this).find(':input').get();
    $.each(els, function() {
        if (this.name && !this.disabled && (this.checked || /select|textarea/i.test(this.nodeName) || /hidden|text|search|tel|url|email|password|datetime|date|month|week|time|datetime-local|number|range|color/i.test(this.type))) {
            var val = $(this).val();
            $.extend(true, hash, stringKey(this.name, val));
        }
    });
    return hash;
  };
})(jQuery);



/* File: app/assets/main/js/pjax.js */
// Generated by CoffeeScript 1.7.1
(function() {
  this.Pjax = {
    skip_on: [],
    push_state: false,
    refresh: function(func) {
      return Pjax.load(location.pathname + location.search, {
        func: func
      });
    },
    init: function(full_page) {
      this.full_page = full_page != null ? full_page : false;
      if (!this.full_page) {
        return alert("#full_page ID referece not defined in PJAX!\n\nWrap whole page in one DIV element");
      }
      if (window.history && window.history.pushState) {
        Pjax.push_state = true;
        window.history.pushState({
          href: location.href,
          type: 'init'
        }, document.title, location.href);
        return window.onpopstate = function(event) {
          console.log(event.state);
          if (event.state && event.state.href) {
            return Pjax.load(event.state.href, {
              history: true
            });
          } else {
            return history.go(-2);
          }
        };
      }
    },
    skip: function() {
      var el, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        el = arguments[_i];
        _results.push(Pjax.skip_on.push(el));
      }
      return _results;
    },
    redirect: function(href) {
      location.href = href;
      return false;
    },
    replace: function(title, body) {
      document.title = title;
      $(this.full_page).html(body);
      return $(document).trigger('page:change');
    },
    load: function(href, opts) {
      var el, speed, _i, _len, _ref;
      if (opts == null) {
        opts = {};
      }
      if (!href) {
        return false;
      }
      if (typeof href === 'object') {
        href = $(href).attr('href');
      }
      if (href === '#') {
        return;
      }
      if (/^http/.test(href)) {
        return this.redirect(href);
      }
      if (/#/.test(href)) {
        return this.redirect(href);
      }
      if (!Pjax.push_state) {
        return this.redirect(href);
      }
      _ref = Pjax.skip_on;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        switch (typeof el) {
          case 'object':
            if (el.test(href)) {
              return this.redirect(href);
            }
            break;
          case 'function':
            if (el(href)) {
              return this.redirect(href);
            }
            break;
          default:
            if (el === href) {
              return this.redirect(href);
            }
        }
      }
      speed = $.now();
      $.get(href).done((function(_this) {
        return function(data) {
          var body, obj;
          console.log("Pjax.load " + (opts.history ? '(back trigger)' : '') + " " + ($.now() - speed) + "ms: " + href);
          obj = $("<div>" + data + "</div>");
          body = obj.find(_this.full_page).html() || data;
          Pjax.replace(obj.find('title').first().html(), body);
          if (!opts['history']) {
            if (location.href.indexOf(href) > -1) {
              window.history.replaceState({
                href: href,
                type: 'replaced'
              }, document.title, href);
            } else {
              window.history.pushState({
                href: href,
                type: 'pushed'
              }, document.title, href);
            }
          }
          if (window._gaq) {
            _gaq.push(['_trackPageview']);
          }
          if (opts.func) {
            return opts.func();
          }
        };
      })(this)).error(function(ret) {
        return Info.error(ret.statusText);
      });
      return false;
    },
    on_get: function(func) {
      if (func) {
        return $(document).on('page:change', function() {
          return func();
        });
      } else {
        return $(document).trigger('page:change');
      }
    }
  };

}).call(this);



/* File: app/assets/components/toastr/toastr.js */
// Generated by CoffeeScript 1.7.1
(function() {
  this.Info = {
    ok: function(msg) {
      return Info.show('success', msg);
    },
    info: function(msg) {
      return Info.show('info', msg);
    },
    noteice: function(msg) {
      return Info.show('info', msg);
    },
    success: function(msg) {
      return Info.show('success', msg);
    },
    error: function(msg) {
      return Info.show('error', msg);
    },
    alert: function(msg) {
      return Info.show('error', msg);
    },
    warning: function(msg) {
      return Info.show('warning', msg);
    },
    auto: function(res, follow_redirects) {
      if (typeof res === 'string') {
        res = jQuery.parseJSON(res);
      }
      if (res['info']) {
        Info.show('info', res['info']);
      }
      if (res['message']) {
        Info.show('info', res['message']);
      }
      if (res['error']) {
        Info.show('error', res['error']);
      }
      if (res['redirect_to'] && follow_redirects) {
        location.href = res['redirect_to'];
      }
      return true;
    },
    show: function(type, msg) {
      var cont, el;
      if (type === 'notice') {
        type = 'info';
      }
      if (type === 'alert') {
        type = 'error';
      }
      el = $('<div class="toast toast-' + type + '" class="toast-top-right"><div class="toast-message">' + msg + '</div></div>');
      cont = $('#toast-container');
      if (!cont[0]) {
        $('body').append('<div id="toast-container" class="toast-bottom-right"></div>');
        cont = $('#toast-container');
      }
      cont.append(el);
      el.css("top", 0);
      return setTimeout((function(_this) {
        return function() {
          return el.remove();
        };
      })(this), 4500);
    }
  };

  window.alert = Info.error;

}).call(this);


// Generated by CoffeeScript 1.7.1
(function() {
  $(function() {
    Pjax.init('#full-page');
    Pjax.on_get(function() {
      return $('a[href]').click(function() {
        return Pjax.load(this);
      });
    });
    return Pjax.on_get();
  });

}).call(this);
